#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pylint:disable=invalid-name

import argparse
import atexit

from wb_common.mqtt_client import DEFAULT_BROKER_URL

from wb_mcu_fw_updater import (
    CONFIG,
    MODE_BOOTLOADER,
    MODE_COMPONENTS,
    MODE_FW,
    die,
    fw_downloader,
    fw_flasher,
    logger,
    update_monitor,
    user_log,
)
from wb_modbus import parse_uart_settings_str
from wb_modbus.bindings import TooOldDeviceError, WBModbusDeviceBase
from wb_modbus.instruments import SerialRPCBackendInstrument, StopbitsTolerantInstrument
from wb_modbus.minimalmodbus import ModbusException, NoResponseError

MODBUS_INSTRUMENTS = {"pyserial": StopbitsTolerantInstrument, "rpc": SerialRPCBackendInstrument}


def check_internet_connection():
    try:
        fw_downloader.get_request(CONFIG["ROOT_URL"])
    except fw_downloader.WBRemoteStorageError:
        die(f"{CONFIG['ROOT_URL']} is not accessible. Check Internet connection!")


def find_connection_params(slaveid, port, response_timeout, instrument):
    try:
        return False, update_monitor.find_connection_params(slaveid, port, response_timeout, instrument)
    except NoResponseError:
        return True, update_monitor.find_bootloader_connection_params(
            slaveid, port, response_timeout, instrument
        )


def _update_alive_device(  # pylint:disable=too-many-arguments,too-many-locals
    slaveid,
    port,
    mode,
    response_timeout,
    branch,
    version,
    force,
    erase_settings,
    instrument=StopbitsTolerantInstrument,
):
    check_internet_connection()

    device_str = f"({port} {slaveid}; response_timeout: {response_timeout:.2f}s)"
    modbus_connection = WBModbusDeviceBase(
        slaveid, port, response_timeout=response_timeout, instrument=instrument
    )

    try:
        is_in_bootloader, conn_settings = find_connection_params(slaveid, port, response_timeout, instrument)
        modbus_connection._set_port_settings_raw(conn_settings)  # pylint:disable=protected-access
    except NoResponseError as e:
        logger.error("Can't connect to %s, check physical connection or address/port", device_str)
        die(e)

    try:
        if is_in_bootloader:
            if mode == MODE_COMPONENTS:
                logger.info(
                    "Device %s is in bootloader. Unable to update components. "
                    "Try to launch update-bl or update-fw",
                    device_str,
                )
                die()

            try:
                bl_version = modbus_connection.get_bootloader_version()
            except ModbusException:
                logger.exception("Failed to read bootloader version")
                bl_version = ""
            logger.info("Device %s supposed to be alive, but found in bootloader %s", device_str, bl_version)
            logger.debug("Trying to acquire fw-signature...")
            fw_sig = update_monitor._restore_fw_signature(  # pylint:disable=protected-access
                modbus_connection
            )
            if fw_sig:
                downloaded_wbfw = update_monitor._do_download(  # pylint:disable=protected-access
                    fw_sig, version, branch, mode
                )
                logger.info(
                    "Will flash %s v:%s to bring %s %s alive",
                    mode,
                    downloaded_wbfw.version,
                    fw_sig,
                    device_str,
                )
                update_monitor.direct_flash(
                    downloaded_wbfw.fpath, modbus_connection, erase_all_settings=erase_settings, force=force
                )
                if mode == MODE_BOOTLOADER:  # we don't know fw's branch/version (only bl's ones)
                    update_monitor.recover_device_iteration(fw_sig, modbus_connection, force)
                else:
                    update_monitor.flash_alive_device_components(
                        modbus_connection, mode, branch, version, force
                    )
            else:
                logger.error("Could not find fw-signature for %s", device_str)
                logger.error('Try to launch "recover" mode with --fw-sig provided manually')
                die()
        else:  # device is alive
            update_monitor.check_device_is_a_wb_one(modbus_connection)
            if mode != MODE_COMPONENTS:  # do not update fw/bl if we are updating components
                update_monitor.flash_alive_device(
                    modbus_connection, mode, branch, version, force, erase_settings
                )
            if mode != MODE_BOOTLOADER:  # do not update components in update-bl
                update_monitor.flash_alive_device_components(modbus_connection, mode, branch, version, force)
            logger.info("%s", user_log.colorize("Done", "GREEN"))
    except (
        TooOldDeviceError,
        ModbusException,
        update_monitor.UpdateDeviceError,
        update_monitor.NoReleasedFwError,
        update_monitor.ForeignDeviceError,
        fw_downloader.WBRemoteStorageError,
        fw_flasher.FlashingError,
    ) as e:
        logger.error("Flashing %s to %s has failed!", mode, device_str)
        die(e)


def update_fw(args):  # pylint:disable=redefined-outer-name
    # Could install specified fw_version from specified branch.
    version = args.specified_version or "release"
    _update_alive_device(
        slaveid=args.slaveid,
        port=args.port,
        mode=MODE_FW,
        response_timeout=args.response_timeout,
        branch=args.branch_name,
        version=version,
        force=args.force,
        erase_settings=args.erase_settings,
        instrument=args.instrument,
    )


def update_bootloader(args):  # pylint:disable=redefined-outer-name
    # Could install specified bl_version from specified branch.
    version = args.specified_version or "latest"  # no bl-releases.yaml yet
    _update_alive_device(
        slaveid=args.slaveid,
        port=args.port,
        mode=MODE_BOOTLOADER,
        response_timeout=args.response_timeout,
        branch=args.branch_name,
        version=version,
        force=args.force,
        erase_settings=False,
        instrument=args.instrument,
    )


def update_components(args):  # pylint:disable=redefined-outer-name
    # Could install specified bl_version from specified branch.
    _update_alive_device(
        slaveid=args.slaveid,
        port=args.port,
        mode=MODE_COMPONENTS,
        response_timeout=args.response_timeout,
        branch="",
        version="latest",
        force=args.force,
        erase_settings=False,
        instrument=args.instrument,
    )


def recover_fw(args):  # pylint:disable=redefined-outer-name
    """
    Recovering the device, stuck in the bootloader
    """
    check_internet_connection()

    device_str = f"{args.slaveid} {args.port}"

    device = WBModbusDeviceBase(
        args.slaveid, args.port, instrument=args.instrument, response_timeout=args.response_timeout
    )
    try:
        conn_settings = update_monitor.find_bootloader_connection_params(
            args.slaveid, args.port, args.response_timeout, args.instrument
        )
        device._set_port_settings_raw(conn_settings)  # pylint:disable=protected-access
    except NoResponseError:
        die(f"Device ({device_str}) is not in bootloader mode! Check connection or slaveid/port")

    try:
        fw_signatures_list = fw_downloader.get_fw_signatures_list()
        # pylint:disable=protected-access
        args.known_signature = args.known_signature or update_monitor._restore_fw_signature(device)

        if args.known_signature:
            update_monitor.recover_device_iteration(args.known_signature, device)

        elif update_monitor.ask_user(
            f'Try all possible fw_signatures ({", ".join(fw_signatures_list)}) for ({device_str}); '
            + f"response_timeout: {args.response_timeout:.2f}?"
        ):
            for fw_sig in fw_signatures_list:  # pylint:disable=not-an-iterable
                logger.info("Trying %s:", fw_sig)
                try:
                    update_monitor.recover_device_iteration(fw_sig, device)
                    break
                except fw_flasher.FlashingError:
                    continue
            else:
                raise fw_flasher.FlashingError(
                    f"No fw_signature from all possible has succeed for device ({device_str})"
                )
        else:
            raise update_monitor.UserCancelledError("Trying all possible fw_signatures has rejected by user")

        logger.info("%s (%s)", user_log.colorize("Done", "GREEN"), device_str)

    except (
        fw_downloader.WBRemoteStorageError,
        fw_flasher.FlashingError,
        update_monitor.NoReleasedFwError,
        update_monitor.UserCancelledError,
    ) as e:
        logger.error("Recovering (%d %s) was not successful", args.slaveid, args.port)
        die(e)


def update_all(args):  # pylint:disable=redefined-outer-name
    """
    Updating firmwares for all devices, specified in wb-mqtt-serial's config.
    """
    check_internet_connection()
    try:
        update_monitor._update_all(  # pylint:disable=protected-access
            force=args.force,
            minimal_response_timeout=args.minimal_response_timeout,
            allow_downgrade=args.allow_downgrade,
            instrument=args.instrument,
        )
    except (update_monitor.ConfigParsingError, ModbusException) as e:
        die(e)


def recover_all(args):  # pylint:disable=redefined-outer-name
    """
    Trying to recover all devices, specified in wb-mqtt-serial's config.
    """
    check_internet_connection()
    try:
        update_monitor._recover_all(  # pylint:disable=protected-access
            minimal_response_timeout=args.minimal_response_timeout,
            force=args.force,
            instrument=args.instrument,
        )
    except (update_monitor.ConfigParsingError, ModbusException) as e:
        die(e)


def flash_fw_file(args):  # pylint:disable=redefined-outer-name
    """
    Directly flashing a fw-file (passed as arg) (args are almost compatible to wb-mcu-fw-flasher)
    """
    device_str = (
        f"{args.port} {args.slaveid} {args.conn_settings} (response timeout: {args.response_timeout:.2f})"
    )
    mode = MODE_FW  # no difference between fw and bl flashing in this case
    if args.fname.endswith(".compfw"):
        mode = MODE_COMPONENTS

    device = WBModbusDeviceBase(
        args.slaveid,
        args.port,
        *args.conn_settings,
        response_timeout=args.response_timeout,
        instrument=args.instrument,
    )
    is_in_bootloader = device.is_in_bootloader()
    if mode == MODE_FW and not is_in_bootloader:
        logger.debug("Rebooting %s to bootloader", device_str)
        try:
            device.reboot_to_bootloader()
        except ModbusException:
            die(f"Device ({device_str}) could not reboot to bootloader. Check connection params")

    if mode == MODE_COMPONENTS:
        if is_in_bootloader:
            die("Device (%s) is in bootloader mode. Unable to flash components", device_str)

        if device.get_available_components() is None:
            die("Device (%s) does not support components update feature", device_str)

    try:
        if mode == MODE_FW:
            update_monitor.direct_flash(args.fname, device, args.erase_all, args.erase_uart)
        else:
            update_monitor.flash_components_with_files(device, [args.fname])
        return
    except fw_flasher.NotInBootloaderError:
        logger.error("Seems, device (%s) is not in bootloader mode", device_str)
    except (fw_flasher.FlashingError, update_monitor.UserCancelledError) as e:
        logger.exception(e)
    logger.error("Unsuccessful flashing!")
    logger.error("\tDevice: %s FW: %s", device_str, args.fname)
    die()


def parse_conn_settings_arg(conn_settings_str):  # pylint:disable=inconsistent-return-statements
    try:
        return parse_uart_settings_str(conn_settings_str)
    except Exception as e:  # pylint:disable=broad-exception-caught
        logger.error(e)
        die()


def add_common_logic_args(parser):  # pylint:disable=inconsistent-return-statements
    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        dest="force",
        default=False,
        help='Force updating all devices and answer "Yes" to all questions. (Default: %(default)s)',
    )
    parser.add_argument(
        "--debug",
        dest="user_loglevel",
        default=None,
        action="store_const",
        const=10,
        help="Setting the least loglevel. (Default: %(default)s)",
    )
    parser.add_argument(
        "--instrument",
        type=str,
        dest="instrument",
        default="pyserial",
        metavar="<connection backend>",
        choices=MODBUS_INSTRUMENTS.keys(),
        help="Connection backend for modbus calls. (Default: %(default)s)",
    )
    parser.add_argument(
        "--broker",
        type=str,
        dest="broker",
        default=DEFAULT_BROKER_URL,
        metavar="<broker>",
        help="MQTT broker url. (Default: %(default)s)",
    )


def add_modbus_connection_args(parser):
    parser.add_argument(
        "-T",
        "--response-timeout",
        type=float,
        dest="response_timeout",
        metavar="<response_timeout>",
        default=0.2,
        help="Modbus response timeout. (Default: %(default)s)",
    )
    parser.add_argument(
        "-a",
        "--slaveid",
        type=int,
        dest="slaveid",
        metavar="<slaveid>",
        required=True,
        choices=range(1, 248),
        help="Slave address of the device.",
    )
    parser.add_argument("port", type=str, metavar="<port>", help="Serial port, device connected to.")


def add_fw_source_args(parser):
    parser.add_argument(
        "--branch",
        type=str,
        dest="branch_name",
        metavar="<branch_name>",
        default="",
        help="Install from specified branch. (Default: %(default)s)",
    )
    parser.add_argument(
        "--version",
        type=str,
        dest="specified_version",
        metavar="<fw_version>",
        default=None,
        help="Download a specified version. (Default: %(default)s)",
    )


def parse_args():  # pylint:disable=inconsistent-return-statements
    main_parser = argparse.ArgumentParser(
        prog="wb-mcu-fw-updater",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="Wiren Board modbus devices firmware/bootloader update tool.",
        add_help=True,
    )
    subparsers = main_parser.add_subparsers(title="Actions", help="Choose mode:\n")

    # Updating firmware on single working device
    update_fw_parser = subparsers.add_parser("update-fw", help="Update firmware on single working device.")
    update_fw_parser.add_argument(
        "--restore-defaults",
        action="store_true",
        dest="erase_settings",
        default=False,
        help="Erase all device's settings during update. (Default: %(default)s)",
    )
    add_common_logic_args(update_fw_parser)
    add_modbus_connection_args(update_fw_parser)
    add_fw_source_args(update_fw_parser)
    update_fw_parser.set_defaults(func=update_fw)

    # Updating bootloader on single working device
    update_bootloader_parser = subparsers.add_parser(
        "update-bl", help="Update bootloader on single working device."
    )
    add_common_logic_args(update_bootloader_parser)
    add_modbus_connection_args(update_bootloader_parser)
    add_fw_source_args(update_bootloader_parser)
    update_bootloader_parser.set_defaults(func=update_bootloader)

    # Updating components on single working device
    update_components_parser = subparsers.add_parser(
        "update-cmp", help="Update components on single working device."
    )
    add_common_logic_args(update_components_parser)
    add_modbus_connection_args(update_components_parser)
    update_components_parser.set_defaults(func=update_components)

    # Flash single device, stuck in the bootloader
    recover_fw_parser = subparsers.add_parser(
        "recover", help="Restore the latest firmware on stuck in bootloader device."
    )
    recover_fw_parser.add_argument(
        "--fw-sig",
        dest="known_signature",
        type=str,
        metavar="<fw_signature>",
        default=None,
        help="Force specify device's firmware signature. (Default: %(default)s)",
    )
    recover_fw_parser.add_argument(
        "--restore-defaults",
        action="store_true",
        dest="erase_settings",
        default=False,
        help="Erase all device's settings during flashing. (Default: %(default)s)",
    )
    add_common_logic_args(recover_fw_parser)
    add_modbus_connection_args(recover_fw_parser)
    recover_fw_parser.set_defaults(func=recover_fw)

    # Update firmware on all devices, found in wb-mqtt-serial config
    update_all_fw_parser = subparsers.add_parser(
        "update-all", help="Trying to update firmwares on all devices, enabled in wb-mqtt-serial's config."
    )
    update_all_fw_parser.add_argument(
        "--allow-downgrade",
        action="store_true",
        dest="allow_downgrade",
        default=False,
        help="Firmware versions could be downgraded. (Default: %(default)s)",
    )
    update_all_fw_parser.add_argument(
        "-T",
        "--min-response-timeout",
        type=float,
        dest="minimal_response_timeout",
        metavar="<minimal_response_timeout>",
        default=0.5,
        help="""Minimal modbus response timeout. Actual response timeout is: \
                                MAX(min_response_timeout, wb-mqtt-serial's response timeouts) \
                                (Default: %(default)s)""",
    )
    add_common_logic_args(update_all_fw_parser)
    update_all_fw_parser.set_defaults(func=update_all)

    # Recover firmware on all devices, found in wb-mqtt-serial config (and are actually in bootloader)
    recover_all_parser = subparsers.add_parser(
        "recover-all", help="Trying to recover all devices, added to wb-mqtt-serial's config."
    )
    recover_all_parser.add_argument(
        "-T",
        "--min-response-timeout",
        type=float,
        dest="minimal_response_timeout",
        metavar="<minimal_response_timeout>",
        default=0.5,
        help="""Minimal modbus response timeout. Actual response timeout is: \
                                MAX(min_response_timeout, wb-mqtt-serial's response timeouts) \
                                (Default: %(default)s)""",
    )
    add_common_logic_args(recover_all_parser)
    recover_all_parser.set_defaults(func=recover_all)

    # Flash a FW file to single device.
    direct_flash_parser = subparsers.add_parser("flash-file", help="Directly flash firmware file")
    direct_flash_parser.add_argument(
        "--conn-settings",
        type=parse_conn_settings_arg,
        dest="conn_settings",
        metavar="<connection_settings_str>",
        default="9600N2",
        help="Connection settings to communicate with alive device (Default: %(default)s)",
    )
    direct_flash_parser.add_argument(
        "-u",
        "--erase-uart",
        action="store_true",
        dest="erase_uart",
        default=False,
        help="Erase device's uart settings? (Default: %(default)s)",
    )
    direct_flash_parser.add_argument(
        "-e",
        "--erase-all",
        action="store_true",
        dest="erase_all",
        default=False,
        help="Erase ALL device's uart settings? (Default: %(default)s)",
    )
    direct_flash_parser.add_argument(
        "--file", type=str, dest="fname", metavar="<firmware_file>", required=True, help="File to flash"
    )
    add_common_logic_args(direct_flash_parser)
    add_modbus_connection_args(direct_flash_parser)
    direct_flash_parser.set_defaults(func=flash_fw_file)

    args = main_parser.parse_args()  # pylint:disable=redefined-outer-name
    if "func" in vars(args):
        return args

    main_parser.print_help()
    print("Each action supports <-h> key for help.")
    die("No action has chosen!")


if __name__ == "__main__":
    args = parse_args()

    user_log.setup_syslog_logger("wb_mcu_fw_updater")
    user_loglevel = args.user_loglevel or CONFIG["USER_LOGLEVEL"]
    user_log.setup_user_logger("wb_mcu_fw_updater", user_loglevel)
    user_log.setup_user_logger("wb_modbus", user_loglevel)

    args.instrument = MODBUS_INSTRUMENTS[args.instrument]

    if args.instrument == StopbitsTolerantInstrument:
        ports = (
            [
                args.port,
            ]
            if "port" in vars(args)
            else update_monitor.get_ports_on_driver(CONFIG["SERIAL_DRIVER_CONFIG_FNAME"])
        )

        # mind atexit order!!
        update_monitor.stop_clients(args.force, *ports)
        atexit.register(lambda: update_monitor.resume_clients(*ports))

        if "port" in vars(args):
            initial_port_settings = update_monitor.get_port_settings(args.port)
            atexit.register(lambda: update_monitor.set_port_settings(args.port, initial_port_settings))
    elif args.instrument == SerialRPCBackendInstrument:
        SerialRPCBackendInstrument._MQTT_BROKER_URL = args.broker  # pylint:disable=protected-access

    atexit.register(update_monitor.db.dump)

    update_monitor.fill_release_info()

    args.func(args)
