#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import logging
import atexit
from subprocess import CalledProcessError
from wb_mcu_fw_updater import fw_downloader, update_monitor, user_log, die, CONFIG
from wb_modbus.bindings import WBModbusDeviceBase


def update_fw(args):
    """
    Updating device's firmware.
    Could install specified fw_version from specified branch.
    """
    modbus_connection = update_monitor.get_correct_modbus_connection(args.slaveid, args.port)
    try:
        update_monitor.flash_alive_device(modbus_connection, 'fw', args.branch_name, args.specified_version, args.force, args.erase_settings)
        logging.info('%s' % user_log.colorize('Done', 'GREEN'))
    except update_monitor.TooOldDeviceError as e:
        die(e)
    except update_monitor.ModbusError as e:
        logging.error("Check device's connection, slaveid and serial port settings!")
        die(e)
    except CalledProcessError as e:
        logging.error("Flashing has failed!")
        die(e)


def update_bootloader(args):
    """
    Updating device's bootloader.
    Only latest version from stable branch is available.
    """
    update_monitor.ask_user("Updating bootloader is a dangerous operation.  Some device settings will be erased.\nIt may brick the device and void the warranty! Are you sure?")
    modbus_connection = update_monitor.get_correct_modbus_connection(args.slaveid, args.port)
    try:
        update_monitor.flash_alive_device(modbus_connection, 'bootloader', '', 'latest', args.force, erase_settings=False)
        logging.info('%s' % user_log.colorize('Done', 'GREEN'))
    except update_monitor.TooOldDeviceError as e:
        die(e)
    except update_monitor.ModbusError as e:
        logging.error("Check device's connection, slaveid and serial port settings!")
        die(e)
    except CalledProcessError as e:
        logging.error("Flashing has failed!")
        die(e)


def recover_fw(args):
    """
    Recovering the device, stuck in the bootloader
    """
    def _flash_in_bl(fw_sig, slaveid, port, custom_speed=None):
        try:
            update_monitor.recover_device_iteration(fw_sig, slaveid, port, custom_bl_speed=custom_speed)
            logging.info('%s' % user_log.colorize('Done', 'GREEN'))
            return True
        except (CalledProcessError, RuntimeError) as e:
            logging.exception(e)
            return False

    if args.slaveid != 0:  # A broadcast-connected device does not answer to in-bootloader-probing cmd
        device = WBModbusDeviceBase(args.slaveid, args.port)
        if not device.is_in_bootloader():
            die("Device (%s : %d) is not in bootloader mode!\nCheck device's connection or slaveid/port" % (args.port, args.slaveid))

    fw_signatures_list = fw_downloader.get_fw_signatures_list()
    if fw_signatures_list is None:
        die('Unable to get allowed fw_signatures')

    if args.known_signature in fw_signatures_list:  # fw_signature was specified manually
        if not _flash_in_bl(args.known_signature, args.slaveid, args.port, args.custom_bl_speed):
            die()

    elif args.known_signature is None:  # A default value from args
        fw_signature = update_monitor._restore_fw_signature(args.slaveid, args.port)
        if fw_signature:
            if _flash_in_bl(fw_signature, args.slaveid, args.port, args.custom_bl_speed):
                return

        # No fw_signature has provided
        if update_monitor.ask_user('Try all possible signatures (%s) on port %s and slaveid %d?' % (', '.join(fw_signatures_list), args.port, args.slaveid)):
            for fw_sig in fw_signatures_list:  # No fw_signatures in db or stored one was unsuccessful
                logging.info('Trying %s:' % fw_sig)
                if _flash_in_bl(fw_sig, args.slaveid, args.port, args.custom_bl_speed):
                    return
        die('Recovering the device (%d : %s) was not successful' % (args.slaveid, args.port))

    else:
        die('Choose a fw_signature from allowed: %s' % (', '.join(fw_signatures_list))) #DO NOT use argparse's choices! (logging could be incorrect)


def update_all(args):
    """
    Updating firmwares for all devices, specified in wb-mqtt-serial's config.
    """
    update_monitor._update_all(force=args.force)


def recover_all(args):
    """
    Trying to recover all devices, specified in wb-mqtt-serial's config.
    """
    update_monitor._recover_all()


def parse_args():
    main_parser = argparse.ArgumentParser(prog='wb-mcu-fw-updater', formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                          description='Wiren Board modbus devices firmware/bootloader update tool.', add_help=True)
    main_parser.add_argument('--debug', dest='user_loglevel', default=None, action='store_const',
                             const=10, help='Setting the least loglevel. (Default: %(default)s)')
    subparsers = main_parser.add_subparsers(
        title='Actions', help='Choose mode:\n')

    """
    Updating firmware on single working device.
    """
    update_fw_parser = subparsers.add_parser(
        'update-fw', help='Update firmware on single working device.')
    update_fw_parser.add_argument('--branch', type=str, dest='branch_name', metavar='<branch_name>', default='',
                                  help='Install firmware from specified branch. (Default: %(default)s)')
    update_fw_parser.add_argument('--version', type=str, dest='specified_version', metavar='<fw_version>',
                                  default='latest', help='Download a specified firmware version. (Default: %(default)s)')
    update_fw_parser.add_argument('--restore-defaults', action='store_true', dest='erase_settings',
                                  default=False, help="Erase all device's settings during update. (Default: %(default)s)")
    update_fw_parser.add_argument('-f', '--force', action='store_true', dest='force', default=False,
                                  help='Perform force device reflash, even if firmware is latest. (Default: %(default)s)')
    update_fw_parser.add_argument(
        '-a', '--slaveid', type=int, dest='slaveid', metavar='<slaveid>', required=True, help='Slave address of the device.')
    update_fw_parser.add_argument(
        "port", type=str, metavar='<port>', help='Serial port, device connected to.')
    update_fw_parser.set_defaults(func=update_fw)

    """
    Updating bootloader on single working device.
    """
    update_bootloader_parser = subparsers.add_parser(
        'update-bl', help='Update bootloader on single working device.')
    update_bootloader_parser.add_argument('-f', '--force', action='store_true', dest='force', default=False,
                                          help='Perform force device reflash, even if firmware is latest. (Default: %(default)s)')
    update_bootloader_parser.add_argument(
        '-a', '--slaveid', type=int, metavar='<slaveid>', dest='slaveid', required=True, help='Slave address of the device.')
    update_bootloader_parser.add_argument(
        "port", type=str, metavar='<port>', help='Serial port, device connected to.')
    update_bootloader_parser.set_defaults(func=update_bootloader)

    """
    Flash single device, stuck in the bootloader.
    """
    recover_fw_parser = subparsers.add_parser(
        'recover', help="Restore the latest firmware on stuck in bootloader device.")
    recover_fw_parser.add_argument('--fw-sig', dest='known_signature', type=str, metavar='<fw_signature>', default=None,
                                   help="Force specify device's firmware signature. (Default: %(default)s)")
    recover_fw_parser.add_argument('--restore-defaults', action='store_true', dest='erase_settings',
                                   default=False, help="Erase all device's settings during flashing. (Default: %(default)s)")
    recover_fw_parser.add_argument('-B', dest='custom_bl_speed', type=int, default=None, help=argparse.SUPPRESS)  # A hidden arg for internal usage
    recover_fw_parser.add_argument(
        '-a', '--slaveid', type=int, dest='slaveid', metavar='<slaveid>', required=True, help='Slave address of the device.')
    recover_fw_parser.add_argument(
        "port", type=str, metavar='<port>', help='Serial port, device connected to.')
    recover_fw_parser.set_defaults(func=recover_fw)

    """
    Update firmware on all devices, found in wb-mqtt-serial config.
    """
    update_all_fw_parser = subparsers.add_parser(
        'update-all', help="Trying to update firmwares on all devices, added to wb-mqtt-serial's config.")
    update_all_fw_parser.add_argument('-f', '--force', action='store_true', dest='force', default=False,
                                      help='Perform force updates of all devices, even if firmwares are latest. (Default: %(default)s)')
    update_all_fw_parser.set_defaults(func=update_all)

    recover_all_parser = subparsers.add_parser(
        'recover-all', help="Trying to recover all devices, added to wb-mqtt-serial's config.")
    recover_all_parser.set_defaults(func=recover_all)

    args = main_parser.parse_args()
    if 'func' in vars(args):
        return args
    else:
        main_parser.print_help()
        print("Each action supports <-h> key for help.")
        die('No action has chosen!')


if __name__ == "__main__":
    args = parse_args()

    user_log.setup_syslog_logger()
    user_log.setup_user_logger((args.user_loglevel or CONFIG['USER_LOGLEVEL']))

    update_monitor.pause_driver()
    atexit.register(update_monitor.resume_driver)
    atexit.register(update_monitor.db.dump)

    if 'port' in vars(args):
        initial_port_settings = update_monitor.get_port_settings(args.port)
        atexit.register(lambda: update_monitor.set_port_settings(args.port, initial_port_settings))

    args.func(args)
